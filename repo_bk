#!/bin/bash
# Date of Creation: 20-Oct-2014

# Location of config file for named parameters
DEFAULT_CONFIG="$HOME/.me/config/repos.sh"

# Base location for repo storage.
# Should end with a trailing '/'.
BASE_LOCATION=$HOME/repos/

# Location of the script that lists the repos to backup.
REPO_LIST_LOCATION="$HOME/.repos.list"

# Command-line Usage
function usage()
{
	echo "Usage:"
	echo -e "\t $0 <options> [optional: config name]"
	echo "Options:"
	echo -e "update - Clone/Fetch changes from all tracked repos"
	echo -e "clean  - Remove all untracked repos"
	echo -e "config - List all config parameters"
	echo -e "help   - Display this menu"
	echo  "Remarks:"
	echo -e "- Location of config file: $DEFAULT_CONFIG"
}

# Load config
function load_config()
{
	local config_name=$2
	source $DEFAULT_CONFIG
	if [[ -n $config_name ]]
	then
		local config=${CONFIG[`echo $config_name`]}
		if [[ -z $config ]]
		then
			echo "Invalid config name: $config_name" >&2
			exit
		fi
		
		# Convert config to array
		config=($config)
		
		BASE_LOCATION=${config[0]}
		REPO_LIST_LOCATION=${config[1]}
	fi
}

# Dump config
function dump_config()
{
	echo "Backup location: "$BASE_LOCATION
	echo "List of tracked repos (file): "$REPO_LIST_LOCATION
}

# Clone a remote repo to a bare repo.
function clone_repo()
{
	local NAME=$1
	local URL=$2

	echo -n "Cloning repo ($URL) ... "
	git clone --quiet --mirror "$URL" "${BASE_LOCATION}$NAME" && echo "DONE"
}

# Fetch changes to a bare repo.
function fetch_repo()
{
	local NAME=$1

	echo -n "Fetching updates ($NAME) ... "
	(cd "${BASE_LOCATION}$NAME" && git fetch && echo "DONE")
}

# Clone / Fetch repo based on presence.
function process_repo()
{
	local NAME=$1

	if [[ -d ${BASE_LOCATION}$NAME ]]
	then
		fetch_repo $*
	else
		clone_repo $*
	fi
}

# Fetch the repo list.
function fetch_repo_list()
{
	echo -n "Fetching repo list from $REPO_LIST_LOCATION ... "
	REPOS=(`cat $REPO_LIST_LOCATION`)
	echo "DONE"
}

# Process all repos mentioned in the data store.
function process_repos()
{
	fetch_repo_list

	# Pocess each repo in the repo list.
	local entries_count=${#REPOS[@]}

	for (( i=0; i < entries_count; i+=2 ))
	do
		process_repo ${REPOS[$i]} ${REPOS[$i+1]}
	done
}

# Clean repos ftom backup location.
# If the repo isn't tracked anymore, then remove the repo.
function clean_repos()
{
	fetch_repo_list

	# Initialize array to store repo names.
	local NAMES=()

	# Get name of all tracked repos.
	echo -n "Get name of all tracked repos ... "
	local i=0
	local entries=${#REPOS[@]}

	while [[ $i < $entries ]]
	do
		if [[ $(( $i % 2 )) == 0 ]]
		then
			NAMES+=(${REPOS[$i]})
		fi
		i=$(( $i + 1 ))
	done
	echo "DONE"


	# Get all repos that are present in the backup location.
	# Array: difference = OLD - NAMES
	echo -n "Generate list of untracked repos ... "
	local OLD=`ls $BASE_LOCATION`
	OLD=(${OLD//\n/ /})
	local difference=()

	for repo in ${OLD[@]}
	do
		local skip=
		for i in ${NAMES[@]}
		do
			[[ $repo == $i ]] && { skip=1; break; }
		done
		[[ -n $skip ]] || difference+=("$repo")
	done
	echo "DONE"

	# Removing untracked repos.
	for repo in ${difference[@]}
	do
		local file="${BASE_LOCATION}$repo"
		echo -n "Removing $file ... "
		rm -rf $file
		echo "DONE"
	done
}

[[ -z $1 ]] && { echo "No options passed."; usage; exit; }

# Update config if name is passed.
load_config $*

case $1 in
	update)	process_repos ;;
	clean)	clean_repos	;;
	config)	dump_config ;;
	help)	usage ;;
	*)
		echo "Unrecognized option."; usage ;;
esac

